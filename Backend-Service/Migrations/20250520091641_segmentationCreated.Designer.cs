// <auto-generated />
using System;
using Backend_Service.Infrastructure.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Backend_Service.Migrations
{
    [DbContext(typeof(ImageContext))]
    [Migration("20250520091641_segmentationCreated")]
    partial class segmentationCreated
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Backend_Service.Domain.Entities.Image", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.HasIndex("FileName")
                        .IsUnique();

                    b.ToTable("Images");
                });

            modelBuilder.Entity("Backend_Service.Domain.Entities.Label", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.ToTable("Labels");
                });

            modelBuilder.Entity("Backend_Service.Domain.Entities.Segmentation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<double>("FirstCoordinateX")
                        .HasColumnType("double precision");

                    b.Property<double>("FirstCoordinateY")
                        .HasColumnType("double precision");

                    b.Property<Guid>("ImageId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("LabelId")
                        .HasColumnType("uuid");

                    b.Property<double>("SecondCoordinateX")
                        .HasColumnType("double precision");

                    b.Property<double>("SecondCoordinateY")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.HasIndex("ImageId");

                    b.HasIndex("LabelId");

                    b.ToTable("Segmentations");
                });

            modelBuilder.Entity("ImageLabel", b =>
                {
                    b.Property<Guid>("ImagesId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("LabelsId")
                        .HasColumnType("uuid");

                    b.HasKey("ImagesId", "LabelsId");

                    b.HasIndex("LabelsId");

                    b.ToTable("ImageLabel");
                });

            modelBuilder.Entity("Backend_Service.Domain.Entities.Segmentation", b =>
                {
                    b.HasOne("Backend_Service.Domain.Entities.Image", "Image")
                        .WithMany()
                        .HasForeignKey("ImageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Backend_Service.Domain.Entities.Label", "Label")
                        .WithMany()
                        .HasForeignKey("LabelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Image");

                    b.Navigation("Label");
                });

            modelBuilder.Entity("ImageLabel", b =>
                {
                    b.HasOne("Backend_Service.Domain.Entities.Image", null)
                        .WithMany()
                        .HasForeignKey("ImagesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Backend_Service.Domain.Entities.Label", null)
                        .WithMany()
                        .HasForeignKey("LabelsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
